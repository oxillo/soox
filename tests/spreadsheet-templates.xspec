<?xml version="1.0" encoding="UTF-8"?>
<x:description xmlns:x="http://www.jenitennison.com/xslt/xspec"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:xh="xspec-helpers"
    xmlns:sml="http://schemas.openxmlformats.org/spreadsheetml/2006/main"
    xmlns:soox="simplify-office-open-xml"
    xmlns:s="soox"
    xmlns:my="my"
    xslt-version="3.0"
    run-as="external"
    stylesheet="../src/spreadsheet-templates.xsl">
    
    
    <x:variable name="x:saxon-config" href="../src/saxon-HE.config"/>

    <x:helper stylesheet="helpers/helpers.xsl" />
    
    <x:scenario label="Given an XML worksheet">
        <x:variable name="my:worksheet" href="data/worksheet.xml"/>
        
        <x:scenario label="when templates are applied on it,">
            <x:context select="$my:worksheet/element()" mode="soox:toOfficeOpenXml" >
                <x:param name="shared-strings" select="('nombre','chaine','toto','flottant','date','Line #12')" tunnel="yes"/>
            </x:context>
            
            <x:expect label="the computed range &lt;dimension&gt; should be as expected" href="data/expected_sheet1.xml"
                select="/sml:worksheet/sml:dimension" test="/sml:worksheet/sml:dimension"/>
            
            <!--x:expect label="the &lt;worksheet&gt; element should be as expected" href="data/expected_sheet1.xml"
                select="xh:remove-whitespacesonly-nodes(.)/sml:worksheet" test="/sml:worksheet"/-->
            
            <x:expect label="the data &lt;sheetData&gt; should be as expected" href="data/expected_sheet1.xml"
                select="xh:remove-whitespacesonly-nodes(.)/sml:worksheet/sml:sheetData" test="/sml:worksheet/sml:sheetData"/>
            
            <x:expect label="the first &lt;row&gt; should be as expected" href="data/expected_sheet1.xml"
                select="xh:remove-whitespacesonly-nodes(.)/sml:worksheet/sml:sheetData/sml:row[1]" test="/sml:worksheet/sml:sheetData/sml:row[1]"/>
            
            <x:expect label="all &lt;row&gt; (but dates row 4) should be as expected" href="data/expected_sheet1.xml"
                select="xh:remove-whitespacesonly-nodes(.)/sml:worksheet/sml:sheetData/sml:row" test="/sml:worksheet/sml:sheetData/sml:row"/>
        </x:scenario>
        
        <x:scenario label="when templates are applied on it,">
            <x:context select="$my:worksheet/element()" mode="soox:toOfficeOpenXml" >
                <x:param name="shared-strings" select="('nombre','chaine','toto','flottant','date','Line #12')" tunnel="yes"/>
            </x:context>
            
            <x:expect label="the rows should be ordered in ascending order"
                as="attribute(r)*" test="//sml:row/@r" select="//sml:row/@r">
                <sml:row r="1"/>
                <sml:row r="2"/>
                <sml:row r="3"/>
                <sml:row r="4"/>
                <sml:row r="12"/>
            </x:expect>
        </x:scenario>
        
        
        <x:scenario label="when column widths are customized,">
            <x:context mode="soox:toOfficeOpenXml">
                <s:worksheet name="Feuil1">
                    <s:style>
                        <s:width col="1" w="15.2"/>
                        <s:width col="2" px="369"/>
                        <s:width col="3" w="25.3" px="215"/>
                        <s:height row="1" h="25.3"/>
                        <s:height row="2" h="0.53cm"/>
                        <s:height row="3" h="40px"/>
                    </s:style>
                    <s:data>
                        <s:cell col="1" row="1">
                            <s:v>Cell (1,1)</s:v>
                        </s:cell> 
                        <s:cell col="2" row="2">
                            <s:v>Cell (2,2)</s:v>
                        </s:cell>
                    </s:data>
                </s:worksheet>
            </x:context>
            
            <x:expect label="the 2nd column should have its width set to 15.2"
                test="//sml:cols/sml:col[@min='1']" >
                <sml:col min="1" max="1" width="15.2" customWidth="1"/>
            </x:expect>
            <x:expect label="the 2nd column should have its width set to 52"
                test="//sml:cols/sml:col[@min='2']" >
                <sml:col min="2" max="2" width="52" customWidth="1"/>
            </x:expect>
            <x:expect label="the 3nd column should have its width set to 25.3"
                test="//sml:cols/sml:col[@min='3']" >
                <sml:col min="3" max="3" width="25.3" customWidth="1"/>
            </x:expect>
        </x:scenario>
        
        <x:scenario label="when row heights are customized, ">
            <x:context mode="soox:toOfficeOpenXml">
                <s:worksheet name="Feuil1">
                    <s:style>
                        <s:width col="1" w="15.2"/>
                        <s:width col="2" px="369"/>
                        <s:width col="3" w="25.3" px="215"/>
                        <s:height row="1" h="25.3"/>
                        <s:height row="2" h="0.53cm"/>
                        <s:height row="3" h="40px"/>
                    </s:style>
                    <s:data>
                        <s:cell col="1" row="1">
                            <s:v>Cell (1,1)</s:v>
                        </s:cell> 
                        <s:cell col="2" row="2">
                            <s:v>Cell (2,2)</s:v>
                        </s:cell>
                    </s:data>
                </s:worksheet>
            </x:context>
            
            <x:expect label="the first row should have its height set at 25.3"
                test="//sml:row[@r='1']" >
                <sml:row r="1" customFormat="false" ht="25.3" hidden="false" customHeight="true"
                    outlineLevel="0" collapsed="false">...</sml:row>
            </x:expect>
            <x:expect label="the 2nd row should have its height set at 20.076"
                test="//sml:row[@r='2']" >
                <sml:row r="2" customFormat="false" ht="20.076" hidden="false" customHeight="true"
                    outlineLevel="0" collapsed="false">...</sml:row>
            </x:expect>
            <x:expect label="the 3rd row should have its height set at 30 (=40*0.75)"
                test="//sml:row[@r='3']" >
                <sml:row r="3" customFormat="false" ht="30" hidden="false" customHeight="true"
                    outlineLevel="0" collapsed="false">...</sml:row>
            </x:expect>
        </x:scenario>
        
        
        <!--<x:scenario label="when xlwfile:worksheet.xml() is called on it," catch="yes">
            <x:call function="soox:worksheet.xml">
                <x:param select="$my:worksheet"/>
            </x:call>
            
            
            <x:expect label="it should return a map with 'content' and 'types' keys"
                test="map:keys($x:result)=('content','types')"/>
            
            <!-\- Check the types returned -\->
            <x:variable name="types" select="$x:result('types')"/>
            <x:expect label="the 'types' key should be a map with 'content' and 'relationship' keys"
                test="map:keys($types)=('content','relationship')"/>
            
            <x:expect label="the 'types/content' key should be 'application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml'"
                test="$types('content')='application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml'"/>
            
            <x:expect label="the 'types/relationship' key should be 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet'"
                test="$types('relationship')='http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet'"/>
            
            <!-\- Check content -\->
            
            <x:variable name="content" select="$x:result('content')/element()"/>
            <x:expect label="the encoded content should be a &lt;worksheet&gt; element"
                test="namespace-uri($content)||'#'||local-name($content) eq 'http://schemas.openxmlformats.org/spreadsheetml/2006/main#worksheet'"/> 
            
            <x:expect label="the encoded content should be a &lt;worksheet&gt; element"
                test="$content/sml:dimension">
                <dimension xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main" ref="A1:B4"/>
            </x:expect>
            
            
            <!-\-test="$content instance of element(worksheet)"-\->
            <!-\-as="element(sml:worksheet)"-\->
            
            
            
        </x:scenario>-->
    </x:scenario>
</x:description>
